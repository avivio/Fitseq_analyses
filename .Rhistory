design_count_post_umi_4_mismatches = as.numeric(as.character(design_count_post_umi_4_mismatches)),
found_designs_all = as.numeric(as.character(found_designs_all)),
design_count_pre_umi_all = as.numeric(as.character(design_count_pre_umi_all)),
design_count_post_umi_all = as.numeric(as.character(design_count_post_umi_all)),
lineage = as.character(lineage),
generation = as.numeric(as.character(generation))
)
summary_data_design_coverage_2_mismatches <- summary_data %>% mutate(found_design_perc = found_designs_2_mismatches/14234 )
summary_data_design_coverage_2_mismatches$lineage <- factor(summary_data_design_coverage_2_mismatches$lineage,
levels = c("Ancestor", "A", "B", "C", "D", "E", "F"))
png('percent_of_library_covered_over_time.png',
type="cairo",    units="in", width=10, height=6, pointsize=12, res=500)
ggplot(summary_data_design_coverage_2_mismatches, aes(x = generation,y = found_design_perc, color = lineage)) +
geom_point(size = 3) +
xlab("Generations") +
ylab("Percent of library covered") +
scale_x_continuous(breaks=c(0, 28, 56, 84, 112,140,168,196)) +
theme_aviv
dev.off()
setwd('designs_covered_by_time_per_liineage_scatter')
setwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\designs_covered_by_time_per_liineage_scatter')
require(dplyr)
require(ggplot2)
require(ggvis)
require(scales)
require(tidyr)
summary_data_location = 'final_summary_generations.csv'
summary_data = t(read.csv(summary_data_location,check.names=FALSE,row.names = 1,as.is = T))
summary_data <- transform(summary_data,
all_reads = as.numeric(as.character(all_reads)),
merged_reads= as.numeric(as.character(merged_reads)),
trimmed_reads= as.numeric(as.character(trimmed_reads)),
found_designs_0_mismatches = as.numeric(as.character(found_designs_0_mismatches)),
design_count_pre_umi_0_mismatches = as.numeric(as.character(design_count_pre_umi_0_mismatches)),
design_count_post_umi_0_mismatches = as.numeric(as.character(design_count_post_umi_0_mismatches)),
found_designs_1_mismatches = as.numeric(as.character(found_designs_1_mismatches)),
design_count_pre_umi_1_mismatches = as.numeric(as.character(design_count_pre_umi_1_mismatches)),
design_count_post_umi_1_mismatches = as.numeric(as.character(design_count_post_umi_1_mismatches)),
found_designs_2_mismatches = as.numeric(as.character(found_designs_2_mismatches)),
design_count_pre_umi_2_mismatches = as.numeric(as.character(design_count_pre_umi_2_mismatches)),
design_count_post_umi_2_mismatches = as.numeric(as.character(design_count_post_umi_2_mismatches)),
found_designs_3_mismatches = as.numeric(as.character(found_designs_3_mismatches)),
design_count_pre_umi_3_mismatches = as.numeric(as.character(design_count_pre_umi_3_mismatches)),
design_count_post_umi_3_mismatches = as.numeric(as.character(design_count_post_umi_3_mismatches)),
found_designs_4_mismatches = as.numeric(as.character(found_designs_4_mismatches)),
design_count_pre_umi_4_mismatches = as.numeric(as.character(design_count_pre_umi_4_mismatches)),
design_count_post_umi_4_mismatches = as.numeric(as.character(design_count_post_umi_4_mismatches)),
found_designs_all = as.numeric(as.character(found_designs_all)),
design_count_pre_umi_all = as.numeric(as.character(design_count_pre_umi_all)),
design_count_post_umi_all = as.numeric(as.character(design_count_post_umi_all)),
lineage = as.character(lineage),
generation = as.numeric(as.character(generation))
)
summary_data_design_coverage_2_mismatches <- summary_data %>% mutate(found_design_perc = found_designs_2_mismatches/14234 )
summary_data_design_coverage_2_mismatches$lineage <- factor(summary_data_design_coverage_2_mismatches$lineage,
levels = c("Ancestor", "A", "B", "C", "D", "E", "F"))
png('percent_of_library_covered_over_time.png',
type="cairo",    units="in", width=10, height=6, pointsize=12, res=500)
ggplot(summary_data_design_coverage_2_mismatches, aes(x = generation,y = found_design_perc, color = lineage)) +
geom_point(size = 3) +
xlab("Generations") +
ylab("Percent of library covered") +
scale_x_continuous(breaks=c(0, 28, 56, 84, 112,140,168,196)) +
theme_aviv
dev.off()
theme_aviv <-     theme_minimal() +
theme( axis.line = element_line(colour = "black"),
axis.text=element_text(size=14), axis.title=element_text(size=16,face="bold"),
strip.text.x = element_text(size=16,face="bold"), strip.text.y = element_text(size=16,face="bold"),
plot.title = element_text(size = 25,face = "bold"),
legend.text = element_text(size=16),legend.title = element_text(size=18,face="bold")	)
png('percent_of_library_covered_over_time.png',
type="cairo",    units="in", width=10, height=6, pointsize=12, res=500)
ggplot(summary_data_design_coverage_2_mismatches, aes(x = generation,y = found_design_perc, color = lineage)) +
geom_point(size = 3) +
xlab("Generations") +
ylab("Percent of library covered") +
scale_x_continuous(breaks=c(0, 28, 56, 84, 112,140,168,196)) +
theme_aviv
dev.off()
sewtwd('C:\Users\dell7\Documents\Tzachi\workspace\Fitseq_analyses\gini_index_over_time_by_lineage_barplot')
sewtwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\gini_index_over_time_by_lineage_barplot')
setwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\gini_index_over_time_by_lineage_barplot')
require(dplyr)
require(tidyr)
require(ggplot2)
require(ineq)
require(scales)
theme_aviv <-     theme_minimal() +
theme( axis.line = element_line(colour = "black"),
axis.text=element_text(size=14), axis.title=element_text(size=16,face="bold"),
strip.text.x = element_text(size=16,face="bold"), strip.text.y = element_text(size=16,face="bold"),
plot.title = element_text(size = 25,face = "bold"))
post.umi.data.location  <- 'final_match_count_14-05-15-1551_2_mismatches.csv'
post.umi.data = read.csv(post.umi.data.location)
post.umi.data <- post.umi.data %>% select(-anc_2)
post.umi.data  <- post.umi.data %>%   gather(sample, frequency, A_24:F_4)
post.umi.data  <- post.umi.data %>% separate(sample, c("lineage", "generation"), '_',convert = T)
post.umi.data <- post.umi.data %>%
group_by(generation,lineage) %>%
mutate(sum.sample= sum(frequency),norm.freq = frequency/sum.sample)
pre.umi.data.location  <- 'match_count_2_mismatches_generations.csv'
pre.umi.data = read.csv(pre.umi.data.location)
pre.umi.data  <- pre.umi.data %>%   gather(sample, frequency, A_168:F_28)
pre.umi.data  <- pre.umi.data %>% separate(sample, c("lineage", "generation"), '_',convert = T)
pre.umi.data <- pre.umi.data %>%
group_by(generation,lineage) %>%
mutate(sum.sample= sum(frequency),norm.freq = frequency/sum.sample)
pre.umi.data.location  <- 'match_count_2_mismatches_generations.csv'
pre.umi.data = read.csv(pre.umi.data.location)
pre.umi.data  <- pre.umi.data %>%   gather(sample, frequency, A_168:F_28)
pre.umi.data  <- pre.umi.data %>% separate(sample, c("lineage", "generation"), '_',convert = T)
pre.umi.data <- pre.umi.data %>%
group_by(generation,lineage) %>%
mutate(sum.sample= sum(frequency),norm.freq = frequency/sum.sample)
glimpse(pre.umi.data)
gini <- pre.umi.freq %>%
group_by(generation,lineage) %>%
summarise(
post.umi.freq =  ineq(frequency.x,type="Gini"),
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
post.umi.freq =  ineq(frequency.x,type="Gini"),
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
# post.umi.freq =  ineq(frequency.x,type="Gini"),
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- filter(gini,lineage !='anc')
glimpse(gini)
gini <-  gini %>%
gather(data.set,
gini,
# post.umi.freq:
pre.umi.freq)
glimpse(gini)
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini %>% filter(data.set == 'pre.umi.freq'), aes(y = gini,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
#   scale_fill_discrete(name="Pre or Post\nUMI processing",
#                       breaks=c("pre.umi.freq", "post.umi.freq"),
#                       labels=c("Pre UMI", "Post UMI")) +
# guides(fill = guide_legend(title = "Pre or Post\nUMI processing")) +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
gini <- filter(gini,lineage !='anc')
gini <-  gini %>%
gather(data.set,
gini,
# post.umi.freq:
pre.umi.freq)
# gini <-  gini %>%
#   filter(data.set == 'gini,post.umi.freq')
# gini <- post.umi.data %>%
#     group_by(generation,lineage) %>%
#     summarise(gini =  ineq(frequency,type="Gini"))
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini %>% filter(data.set == 'pre.umi.freq'), aes(y = gini,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
#   scale_fill_discrete(name="Pre or Post\nUMI processing",
#                       breaks=c("pre.umi.freq", "post.umi.freq"),
#                       labels=c("Pre UMI", "Post UMI")) +
# guides(fill = guide_legend(title = "Pre or Post\nUMI processing")) +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
# post.umi.freq =  ineq(frequency.x,type="Gini"),
pre.umi.freq =  ineq(frequency,type="Gini"))
# gini <- filter(gini,generation !=0)
#
# gini[gini$generation == 1,'lineage'] <- 'A'
# gini[gini$generation == 1,'generation'] <- 0
#
gini <- filter(gini,lineage !='anc')
gini <-  gini %>%
gather(data.set,
gini,
# post.umi.freq:
pre.umi.freq)
# gini <-  gini %>%
#   filter(data.set == 'gini,post.umi.freq')
# gini <- post.umi.data %>%
#     group_by(generation,lineage) %>%
#     summarise(gini =  ineq(frequency,type="Gini"))
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini %>% filter(data.set == 'pre.umi.freq'), aes(y = gini,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
#   scale_fill_discrete(name="Pre or Post\nUMI processing",
#                       breaks=c("pre.umi.freq", "post.umi.freq"),
#                       labels=c("Pre UMI", "Post UMI")) +
# guides(fill = guide_legend(title = "Pre or Post\nUMI processing")) +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
# post.umi.freq =  ineq(frequency.x,type="Gini"),
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- filter(gini,lineage !='anc')
gini$lineage
gini$lineage = factor(gini$lineage)
gini$lineage
gini <- filter(gini,lineage !='Ancestor')
gini$lineage
gini$lineage = factor(gini$lineage)
gini$lineage
gini <- filter(gini,lineage !='Ancestor')
gini$lineage = factor(gini$lineage)
gini <-  gini %>%
gather(data.set,
gini,
# post.umi.freq:
pre.umi.freq)
# gini <-  gini %>%
#   filter(data.set == 'gini,post.umi.freq')
# gini <- post.umi.data %>%
#     group_by(generation,lineage) %>%
#     summarise(gini =  ineq(frequency,type="Gini"))
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini %>% filter(data.set == 'pre.umi.freq'), aes(y = gini,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
#   scale_fill_discrete(name="Pre or Post\nUMI processing",
#                       breaks=c("pre.umi.freq", "post.umi.freq"),
#                       labels=c("Pre UMI", "Post UMI")) +
# guides(fill = guide_legend(title = "Pre or Post\nUMI processing")) +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- filter(gini,lineage !='Ancestor')
gini$lineage = factor(gini$lineage)
glimpse(gini)
require(dplyr)
require(tidyr)
require(ggplot2)
require(ineq)
require(scales)
theme_aviv <-     theme_minimal() +
theme( axis.line = element_line(colour = "black"),
axis.text=element_text(size=14), axis.title=element_text(size=16,face="bold"),
strip.text.x = element_text(size=16,face="bold"), strip.text.y = element_text(size=16,face="bold"),
plot.title = element_text(size = 25,face = "bold"))
pre.umi.data.location  <- 'match_count_2_mismatches_generations.csv'
pre.umi.data = read.csv(pre.umi.data.location)
pre.umi.data  <- pre.umi.data %>%   gather(sample, frequency, A_168:F_28)
pre.umi.data  <- pre.umi.data %>% separate(sample, c("lineage", "generation"), '_',convert = T)
pre.umi.data <- pre.umi.data %>%
group_by(generation,lineage) %>%
mutate(sum.sample= sum(frequency),norm.freq = frequency/sum.sample)
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
pre.umi.freq =  ineq(frequency,type="Gini"))
gini <- filter(gini,lineage !='Ancestor')
gini$lineage = factor(gini$lineage)
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini, aes(y = pre.umi.freq,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
#create the gini score for each sample using the ineq package
gini <- pre.umi.data %>%
group_by(generation,lineage) %>%
summarise(
gini =  ineq(frequency,type="Gini"))
#chuck the ancestor lineage since it's not nice in the figure, refactor after
gini <- filter(gini,lineage !='Ancestor')
gini$lineage = factor(gini$lineage)
#plot the figure using a barplot with the generation as the x and gini as y
png('gini_over_time_lienages.png',
type="cairo",    units="in", width=22, height=6, pointsize=12, res=500)
ggplot(gini, aes(y = gini,x = factor(generation))) +
geom_bar(stat = 'identity',position = 'dodge', fill = hue_pal()(2)[2]) +
ylab('Gini index\n') +
xlab('\nGeneration') +
theme_aviv +
facet_wrap(~lineage,nrow = 1)
dev.off()
setwd('C:\Users\dell7\Documents\Tzachi\workspace\Fitseq_analyses\frequency_over_time_rbs_promoter_density')
setwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\frequency_over_time_rbs_promoter_density')
#load libraries
require(tidyr)
require(ggplot2)
require(dplyr)
#load data
#can't upload data to git so I need to upload this data to the right place later
fitseq.data.location  <- 'C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\data\\fitseq_data_with_meta_no_umi_generations.csv'
fitseq.data = read.csv(fitseq.data.location)
#throw out uneeded goodman data
fitseq.data.tidy <- fitseq.data %>% select(-Count.A.DNA,-Count.A.RNA,-Count.B.DNA,-Count.B.RNA,
-Bin.1,-Bin.2,-Bin.3,-Bin.4,-Bin.5,-Bin.6,-Bin.7,
-Bin.8,-Bin.9,-Bin.10,-Bin.11,-Bin.12,-RNA.A,-RNA.B,
-Bin.Pct.1,-Bin.Pct.2,-Bin.Pct.3,-Bin.Pct.4,-Bin.Pct.5,
-Bin.Pct.6,-Bin.Pct.7,-Bin.Pct.8,-Bin.Pct.9,-Bin.Pct.10,
-Bin.Pct.11,-Bin.Pct.12,-Insuff.Prot,-Insuff.DNA,
-Insuff.RNA,-Fltr.BelowRange,-Fltr.AboveRange ,
-Fltr.SetGood,-full.seq)
#convert from long to wide on sample column, plit sample to generation and lineage
fitseq.data.tidy  <- fitseq.data.tidy %>%   gather(sample, frequency, A_168:F_0)
fitseq.data.tidy  <- fitseq.data.tidy %>% separate(sample, c("lineage", "generation"), '_',convert = T)
#refactor the rbs and the lineages so they look nice in the figure
fitseq.data.tidy$RBS.Display <- factor(fitseq.data.tidy$RBS.Display,
levels = c("Strong", "Mid", "Weak", "WT"))
fitseq.data.tidy$lineage <- factor(fitseq.data.tidy$lineage,
levels = c("Ancestor", "A", "B", "C", "D", "E", "F"))
#create the variable of the fitnss by normalizing the frequency to the sample and then the sample to anc_1 (+1 for log transformation)
fitseq.data.tidy  <- fitseq.data.tidy %>%
group_by(generation,lineage) %>%
mutate(sum.sample= sum(frequency),norm.freq = frequency/sum.sample,
sum.anc= sum(anc_1),norm.anc = anc_1/sum.anc,freq.norm.anc = norm.freq/norm.anc,
sum.sample.1= sum(frequency+1),norm.freq.1 = (frequency+1)/sum.sample.1,
sum.anc.1= sum(anc_1+1),norm.anc.1 = (anc_1+1)/sum.anc.1,freq.norm.anc.1 = norm.freq.1/norm.anc.1)
#historgrams of normalized frequency + 1 log transformed for different day, rbs-promoter groups, and lineages,
line.day.histogram   <- function(lineage_letter,days,fitseq.data.tidy){
#a funtion the plot the density plots of each day and facet by the rbs and promoter
#start plot, change the label of the figure by the lineage
png(paste0(result.dir,'days_fill_normalized_frequency_histograms_lineage_',lineage_letter,'_hist.png'),
type="cairo",    units="in", width=10, height=6, pointsize=12, res=500)
#plot the density plots using all the data in the dataset that is in the days vector, is the right lineage and not wt rbs
#x log normalized frequency, and fill is the day, facet by rbs and promtoere
p =  ggplot(filter(fitseq.data.tidy,day %in% days,lineage == lineage_letter,RBS.Display != 'WT') ,
aes(log2(freq.norm.anc.1),fill = factor(day)))  +
stat_bin(geom='area',position = 'identity',alpha=.5) +
theme_minimal() +
facet_grid(RBS.Display~Promoter.Display)  +
theme_aviv +
guides(color = guide_legend("Day"),fill = guide_legend("Day")) +
xlab('\nLog 2 of normalized frequency + 1') +
ylab('Count\n') +
#I expanded the limit by looking at what looks best for all lineages
expand_limits(y=900)
print(p)
dev.off()
}
line.rbs.histogram   <- function(lineage_letter,generations,fitseq.data.tidy){
#a funtion the plot the density plots of each rbs and facet by the day and promoter
#set the levels of the promoter so you can understand the meaning in the facet text
levels(fitseq.data.tidy$Promoter.Display) <- c("High promoter", "Low promoter")
#create the figures as png with each figure a different lineage
png(paste0(result.dir,'rbs_fill_frequency_histograms_lineage_',lineage_letter,'.png'),
type="cairo",    units="in", width=9, height=11, pointsize=12, res=500)
#plot the log normalized freq +1 with the fill being the rbs, using the data that fits the lineage, days vector and no wt rbs
p =  ggplot(filter(fitseq.data.tidy,generation %in% generations,lineage == lineage_letter,RBS.Display != 'WT') ,
aes(log2(norm.freq.1),fill = factor(RBS.Display)))  +
stat_bin(geom='area',position = 'identity',alpha=.5) +
theme_minimal() +
#facet by generation and promoter
facet_grid(generation~Promoter.Display)  +
theme_aviv +
guides(color = guide_legend("Generation"),fill = guide_legend("RBS")) +
xlab('\nLog 2 frequency') +
ylab('# designs\n') +
# I played with the limits by eye so that all the lineages look good
expand_limits(y=1000) +
coord_cartesian(xlim = c(-24,-10))
print(p)
dev.off()
}
#go over each lineage and ru figures filled by rbs and faceted by generation
for (lineage in c('A','B','C','D','E','F')){
line.rbs.histogram(lineage,c(28,56,84,112,140,168,196),fitseq.data.tidy)
}
line.day.histogram   <- function(lineage_letter,days,fitseq.data.tidy){
#a funtion the plot the density plots of each day and facet by the rbs and promoter
#start plot, change the label of the figure by the lineage
png(paste0('days_fill_normalized_frequency_histograms_lineage_',lineage_letter,'_hist.png'),
type="cairo",    units="in", width=10, height=6, pointsize=12, res=500)
#plot the density plots using all the data in the dataset that is in the days vector, is the right lineage and not wt rbs
#x log normalized frequency, and fill is the day, facet by rbs and promtoere
p =  ggplot(filter(fitseq.data.tidy,day %in% days,lineage == lineage_letter,RBS.Display != 'WT') ,
aes(log2(freq.norm.anc.1),fill = factor(day)))  +
stat_bin(geom='area',position = 'identity',alpha=.5) +
theme_minimal() +
facet_grid(RBS.Display~Promoter.Display)  +
theme_aviv +
guides(color = guide_legend("Day"),fill = guide_legend("Day")) +
xlab('\nLog 2 of normalized frequency + 1') +
ylab('Count\n') +
#I expanded the limit by looking at what looks best for all lineages
expand_limits(y=900)
print(p)
dev.off()
}
line.rbs.histogram   <- function(lineage_letter,generations,fitseq.data.tidy){
#a funtion the plot the density plots of each rbs and facet by the day and promoter
#set the levels of the promoter so you can understand the meaning in the facet text
levels(fitseq.data.tidy$Promoter.Display) <- c("High promoter", "Low promoter")
#create the figures as png with each figure a different lineage
png(paste0('rbs_fill_frequency_histograms_lineage_',lineage_letter,'.png'),
type="cairo",    units="in", width=9, height=11, pointsize=12, res=500)
#plot the log normalized freq +1 with the fill being the rbs, using the data that fits the lineage, days vector and no wt rbs
p =  ggplot(filter(fitseq.data.tidy,generation %in% generations,lineage == lineage_letter,RBS.Display != 'WT') ,
aes(log2(norm.freq.1),fill = factor(RBS.Display)))  +
stat_bin(geom='area',position = 'identity',alpha=.5) +
theme_minimal() +
#facet by generation and promoter
facet_grid(generation~Promoter.Display)  +
theme_aviv +
guides(color = guide_legend("Generation"),fill = guide_legend("RBS")) +
xlab('\nLog 2 frequency') +
ylab('# designs\n') +
# I played with the limits by eye so that all the lineages look good
expand_limits(y=1000) +
coord_cartesian(xlim = c(-24,-10))
print(p)
dev.off()
}
#go over each lineage and ru figures filled by rbs and faceted by generation
for (lineage in c('A','B','C','D','E','F')){
line.rbs.histogram(lineage,c(28,56,84,112,140,168,196),fitseq.data.tidy)
}
theme_aviv <-     theme_minimal() +
theme( axis.line = element_line(colour = "black"),
axis.text=element_text(size=14), axis.title=element_text(size=16,face="bold"),
strip.text.x = element_text(size=16,face="bold"), strip.text.y = element_text(size=16,face="bold"),
plot.title = element_text(size = 25,face = "bold"),
legend.text = element_text(size=16),legend.title = element_text(size=18,face="bold")	)
#go over each lineage and ru figures filled by rbs and faceted by generation
for (lineage in c('A','B','C','D','E','F')){
line.rbs.histogram(lineage,c(28,56,84,112,140,168,196),fitseq.data.tidy)
}
require(dplyr)
require(ineq)
require(dendextend)
require(dplyr)
require(ineq)
require(dendextend)
#load data
raw_data_location_2_mismatches = 'C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\data\\match_count_2_mismatches_generations.csv'
fitseq_raw_data_2_mismatches = read.csv(raw_data_location_2_mismatches,check.names=FALSE)
#rename the first column
colnames(fitseq_raw_data_2_mismatches)[1] = 'design'
# #then throw it out
# fitseq_raw_data_mat_2_mismatches  <- data.matrix(fitseq_raw_data_2_mismatches %>% select(-design))
# fitseq_raw_data_norm_2_mismatches  <- data.frame(sweep(fitseq_raw_data_mat_2_mismatches,2,colSums(fitseq_raw_data_mat_2_mismatches),`/`))
# fitseq_raw_data_norm_log1p_2_mismatches  <- data.frame(log10(sweep(fitseq_raw_data_mat_2_mismatches+1,2,colSums(fitseq_raw_data_mat_2_mismatches+1),`/`)))
#create a color list for each of the lineages
lineage_colors <- hue_pal()(7)
names(lineage_colors) <- c('Ancestor', 'A', 'B', 'C', 'D', 'E', 'F')
#create a color list for each of the generations
generation_colors <- hue_pal()(8)
names(generation_colors) <- seq(0,196,28)
generation_colors["0"] <- lineage_colors['Ancestor']
setwd('C:\Users\dell7\Documents\Tzachi\workspace\Fitseq_analyses\sample_corelation_dendgrograms')
setwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\sample_corelation_dendgrograms')
fitseq_spearman_distance_matrix_2_mismatches  <-  dist(1-cor(fitseq_raw_data_2_mismatches %>% select(-design) , method = "spearman"))
fitseq_spearman_clustering_2_mismatches  <- hclust(fitseq_spearman_distance_matrix_2_mismatches,method = 'average')
spearman.dend <- as.dendrogram(fitseq_spearman_clustering_2_mismatches)
branch.col <- lineage_colors[as.character(t(as.data.frame(strsplit(names(fitseq_raw_data_2_mismatches)[-1][order.dendrogram(spearman.dend)],'_'))[1,]))]
require(scales)
lineage_colors <- hue_pal()(7)
names(lineage_colors) <- c('Ancestor', 'A', 'B', 'C', 'D', 'E', 'F')
#create a color list for each of the generations
generation_colors <- hue_pal()(8)
names(generation_colors) <- seq(0,196,28)
generation_colors["0"] <- lineage_colors['Ancestor']
fitseq_spearman_distance_matrix_2_mismatches  <-  dist(1-cor(fitseq_raw_data_2_mismatches %>% select(-design) , method = "spearman"))
fitseq_spearman_clustering_2_mismatches  <- hclust(fitseq_spearman_distance_matrix_2_mismatches,method = 'average')
spearman.dend <- as.dendrogram(fitseq_spearman_clustering_2_mismatches)
branch.col <- lineage_colors[as.character(t(as.data.frame(strsplit(names(fitseq_raw_data_2_mismatches)[-1][order.dendrogram(spearman.dend)],'_'))[1,]))]
spearman.dend <- color_branches(spearman.dend,col =branch.col )
labels_colors(spearman.dend) <- generation_colors[as.character(t(as.data.frame(strsplit(names(fitseq_raw_data_2_mismatches)[-1][order.dendrogram(spearman.dend)],'_'))[2,]))]
spearman.dend <- set(spearman.dend, 'branches_lwd',3)
png('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\results\\for_thesis\\fitseq_spearman_upgma_clustering_2_mismatches.png',
type="cairo",    units="in", width=14, height=6, pointsize=12, res=500)
plot(spearman.dend)
dev.off()
pwd()
setwd('C:\\Users\\dell7\\Documents\\Tzachi\\workspace\\Fitseq_analyses\\sample_corelation_dendgrograms')
png('fitseq_spearman_upgma_clustering_2_mismatches.png',
type="cairo",    units="in", width=14, height=6, pointsize=12, res=500)
plot(spearman.dend)
dev.off()
#pearson
fitseq_pearson_distance_matrix_2_mismatches  <-  dist(1-cor(fitseq_raw_data_2_mismatches %>% select(-design), method = "pearson"))
fitseq_pearson_clustering_2_mismatches  <- hclust(fitseq_pearson_distance_matrix_2_mismatches,method = 'average')
pearson.dend <- as.dendrogram(fitseq_pearson_clustering_2_mismatches)
branch.col <- lineage_colors[as.character(t(as.data.frame(strsplit(names(fitseq_raw_data_2_mismatches)[-1][order.dendrogram(pearson.dend)],'_'))[1,]))]
pearson.dend <- color_branches(pearson.dend,col =branch.col )
labels_colors(pearson.dend) <- generation_colors[as.character(t(as.data.frame(strsplit(names(fitseq_raw_data_2_mismatches)[-1][order.dendrogram(pearson.dend)],'_'))[2,]))]
pearson.dend <- set(pearson.dend, 'branches_lwd',3)
png('fitseq_pearson_upgma_clustering_2_mismatches.png',
type="cairo",    units="in", width=14, height=6, pointsize=12, res=500)
plot(pearson.dend)
dev.off()
